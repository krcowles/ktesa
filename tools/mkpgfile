#!/bin/bash
# VERSION 1.0;
# NOTE: Flags which have arguments must have a space between the flag and argument
# Specify starting & default values for shell variables 
FILESRC=0
SrcFileName=""
URLSRC=0
SrcUrl=""
JpgLoc="."
LPIX=""
UPIX=""
Lno=0
Uno=0
#k=0
# Now process command line arguments
for i
do
        #k=$(( $k + 1 )) k not used in this script...
        # $i is argument $k
	# -f Get filename for local html 
	if [ $FILESRC -gt 0 ]
	then {
		SrcFileName=$i
		FILESRC=0
	}
	fi
	# -u or else get Url for html source
	if [ $URLSRC -gt 0 ]
	then {
		SrcUrl=$i
		URLSRC=0
	}
	fi
        # find flags:
        case $i in
	-f) FILESRC=1 ;;
        -u) URLSRC=1 ;;
	-h) echo "
*** VERSION 1.0
This utility requires local copies of photos w/full metadata that also
have been uploaded to a Flickr Ablum. 

If there is a local copy of the Flickr Album source, specify it with the -f flag;
If there is no local copy, specify the URL with the -u flag. 
Flags require a space before its argument
"
exit;;
        esac
done
if( test -n "$SrcUrl" )
then {
	curl -L $SrcUrl > zool
	SrcFileName=zool
	RMFLAG=1
}
else    RMFLAG=0
fi
#Create 2 lists of picture name files: lower- and upper-case jpg filenames:
PFILES=( `ls -1 $JpgLoc` )
for filename in ${PFILES[@]}
do
        case $filename in
                *.jpg) LPIX="${LPIX} ${filename%.*}" ;;
                *.JPG) UPIX="${UPIX} ${filename%.*}" ;;
        esac
done
Lno=`echo "$LPIX" | wc -w`
Uno=`echo "$UPIX" | wc -w`
cat $SrcFileName |
/usr/bin/awk -v FSpec=$JpgLoc -v lnum="$Lno" -v unum="$Uno" -v ljpgs="$LPIX" -v ujpgs="$UPIX" ' 
function ExtractString(Str,EndQuote)
{
        AttrStart=RSTART+RLENGTH+1
        RemainingString=substr(Str,AttrStart,length(Str)-AttrStart)
        if( EndQuote == 1 ) {
                AttrEnd=index(RemainingString,"\"")-1
                Attr=substr(RemainingString,1,AttrEnd)
                return Attr
        }
        else return RemainingString
}
BEGIN   {
        FS=","
        OFS="\t"
	if( lnum > 0 ) {
		split(ljpgs,LPIX," ")
	}
	if( unum > 0 ) {
		split(ujpgs,UPIX," ")
	}
        # Create Header Row:
        print "desc" OFS "name" OFS "album-link" OFS "date" OFS "n-size"
} #end BEGIN
{
        # Get Album ID
        if (match($0,/\"albumId\":/)) {
                albumId=ExtractString($0,1)
        }

        if (match($0,/\{\"_flickrModelRegistry\":\"photo-models\"/)) {
                NumPix = split($0,PicsArray,/\{\"_flickrModelRegistry\":\"photo-models\"/)

                # Get Owner ID
                if( match(PicsArray[1], /\"id\":/)) {
                        ownerId=ExtractString($0,1)
                }
                else exit(4)
                for (j=2; j<=NumPix; j++) {

                        # Get title = photo name = file name:
                        if( match(PicsArray[j], /\"title\":/)) {
                                title=ExtractString(PicsArray[j],1)
                        }
                        else exit(4)

                        # There may or may not be a "description", check the string:
                        if( match(PicsArray[j], /\"description\":/)) {
                                description=ExtractString(PicsArray[j],1)
                        }
                        else description = "Enter description here"

                        # Get the n-size pointer
                        if( match(PicsArray[j], "\"n\"")) {
				nSize=ExtractString(PicsArray[j],0)
				if( match(nSize,/\"url\":/)) {
					n_url=ExtractString(nSize,1)
					gsub(/\\/,"",n_url)
				}
				else exit(4)
			}
                        
                        # Get Photo ID to use for building Photo URL
                        if( match(PicsArray[j], /\"ownerNsid\":/)) {
                                Nsid=ExtractString(PicsArray[j],0)
                                if( match(Nsid, /\"id\":/)) {
                                        photoId=ExtractString(Nsid,1)
                                }
                                else exit(4)
                        }
                        else exit(4)
			
                        # Get GPS data using exiftool: NOTE: case treatment of jpg (upper & lower-case)
			if( lnum > 0 ) {
				for(m=1; m<=lnum; m++) {
					if( LPIX[m] ~ title ) {
						exifCmdLine=sprintf("exiftool -csv -n -Date* " FSpec "/" title ".jpg | tail -1" )
					}
				}
			}
			if( unum > 0 ) {
				for(k=1; k<=unum; k++) {
					if( UPIX[k] ~ title ) {
						exifCmdLine=sprintf("exiftool -csv -n -Date* " FSpec "/" title ".JPG | tail -1" )
					}
				}
			}
                        exifCmdLine | getline exifOutput
			gpsInfoCount=split(exifOutput,gpsInfo,/,/)

                        # All elements are in place to create viewing option specified:
                        flickrleft="https://www.flickr.com/photos/"
                        pageurl=sprintf(flickrleft ownerId "/" photoId "/in/album-" albumId)
                        print title OFS description OFS pageurl OFS gpsInfo[2]  OFS "https:" n_url
                }  #END for(j=2;   loop
        }  #END match for photo-models
}  #END awk script
' > GPSVinput.tsv
if [ $RMFLAG == 1 ]
then {
	$(rm zool)
}
fi
echo "DONE"
#
#-------------------------------------------------------------
# Size Letter Options: NOTE: Samsung phone listed first
# TYPE          KEY     IMAGE SIZE      NOTES
#-------------------------------------------------------------
# Square 75     sq      75 x 75         Both phones
# Square 150    q       150 x 150       Both phones
# Thumbnail     t       100 x 60        iPhone6: 100 x 75
# Small 240     s       240 x 144       iPhone6: 240 x 180
# Small 320     n       320 x 192       iPhone6: 320 x 240
# Medium 500    m       500 x 300       iPhone6: 500 x 375
# Medium 640    z       640 x 384       iPhone6: 640 x 480
# Medium 800    c       800 x 480       iPhone6: 800 x 600
# Large 1024    l       1024 x 614      iPhone6: 1024 x 768
# Large 1600    h       1600 x 960      iPhone6: 1600 x 1200
# Large 2048    k       2048 x 1229     iPhone6: 2048 x 1536
# Original      o       2560 x 1536     iPhone6: 3264 x 2448

