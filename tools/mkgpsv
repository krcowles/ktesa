#!/bin/bash
# VERSION 7.0; added -h help flag
# Specify starting & default values for shell variables 
FILESRC=0
SrcFileName=""
JPGFLAG=0
JpgLoc="."	# Defualt loc for .jpg files
OPTFLAG=0
OnClick=1
THUMBARG=0
ThumbSize=m	# Default size for thumbnails
URLSRC=0
SrcUrl=""
LPIX=""
UPIX=""
Lno=0
Uno=0
export JpgLoc
#k=0
# Now process command line arguments
for i
do
        #k=$(( $k + 1 )) k not used in this script...
        # $i is argument $k
	# -f Get filename for local html 
	if [ $FILESRC -gt 0 ]
	then {
		SrcFileName=$i
		FILESRC=0
	}
	fi
	# -u or else get Url for html source
	if [ $URLSRC -gt 0 ]
	then {
		SrcUrl=$i
		URLSRC=0
	}
	fi
	# file spec for location of jpg's
	if [ $JPGFLAG -gt 0 ]
	then {
		JpgLoc=$i
		JPGFLAG=0
		echo $JPGFLAG
	}
	fi
        # "-o" opt:
        if [ $OPTFLAG -gt 0 ]
        then {
                OnClick=$i
                OPTFLAG=0
        }
        fi
        # "-t" opt:
        if [ $THUMBARG -gt 0 ]
        then {
                ThumbSize=$i
                THUMBARG=0
        }
        fi
        # find flags:
        case $i in
	-f) FILESRC=1 ;;
	-h) echo "
*** Version 7.0 
This utility will create a local file called \"GPSVinput.tsv\", suitable for use
as input (along with the corresponding .GPX file) on the GPSVisualizer website.
That site will create a geomap providing popup photos from a Flickr album. The Flickr
album must first be created, and local copies of all the photos in the Flickr album
(with full metadata) must exist for this utility to complete succesfully.

This utility requires either the -f flag or -u flag (see below)

Some of the optional arguments may use a photo \"letter size\" corresponding to a
Flickr designation of the image size. The defined letter sizes (appearing in the
column indicating \"KEY\") are provided below for the Samsung phone (default) and 
for the iPhone6. The Image Size is in pixels:
-------------------------------------------------------------
 Letter Size: 
 TYPE          KEY     IMAGE SIZE      NOTES
-------------------------------------------------------------
 Square 75     sq      75 x 75         Both phones
 Square 150    q       150 x 150       Both phones
 Thumbnail     t       100 x 60        iPhone6: 100 x 75
 Small 240     s       240 x 144       iPhone6: 240 x 180
 Small 320     n       320 x 192       iPhone6: 320 x 240
 Medium 500    m       500 x 300       iPhone6: 500 x 375
 Medium 640    z       640 x 384       iPhone6: 640 x 480
 Medium 800    c       800 x 480       iPhone6: 800 x 600
 Large 1024    l       1024 x 614      iPhone6: 1024 x 768
 Large 1600    h       1600 x 960      iPhone6: 1600 x 1200
 Large 2048    k       2048 x 1229     iPhone6: 2048 x 1536
 Original      o       2560 x 1536     iPhone6: 3264 x 2448


Flag arguments must be preceded by a space. The options for this utility are:
    -f  =>  OPTIONAL/REQUIRED, 1 ARG; supply filename as ARG for html source file
            *** NOTE: MUST USE EITHER -f or -u FLAG on command line
    -o  =>  OPTIONAL, 1 ARG; Specify option for displaying \"on-click\" picture:
            1  -Supplies Flickr URL for picture in album, allowing photostream viewing (size \"o\")
            2  -Supplies Flickr URL for picture in album, allowing album-only viewing (size \"o\")
            3  -MAY HAVE KEYSIZE LETTER(S) APPENDED: e.g. 3m or 3sq, NO LETTER defaults to \"o\"
               -Supplies Flickr URL for web file of picture for specified letter size
            4  -Supplies Flickr URL for picture on album \"sizes\" page
            [DEFAULT, -o not specified: 1]
    -j      OPTIONAL, 1 ARG; supply file path for jpg files (e.g. ~/Desktop/Hike1)
    -t  =>  OPTIONAL, 1 ARG; ARG is size letter (see listing at bottom for sizes)
            for determining pop-up (thumbnail) picture size
            [DEFAULT, -t not specified, or no ARG after -t: m]
            Caution: larger image sizes may slow popup time
    -u  =>  OPTIONAL, 1 ARG; supply URL for Flickr web source as ARG
            *** NOTE: MUST USE EITHER -f or -u FLAG on command line
" | more
exit;;
	-j) JPGFLAG=1 ;;
        -o) OPTFLAG=1 ;;
        -t) THUMBARG=1 ;;
        -u) URLSRC=1 ;;
        esac
done
if( test -n "$SrcUrl" )
then {
	curl -L $SrcUrl > zool
	SrcFileName=zool
	RMFLAG=1
}
else    RMFLAG=0
fi
#Create 2 lists of picture name files: lower- and upper-case jpg filenames:
PFILES=( `ls -1 $JpgLoc` )
for filename in ${PFILES[@]}
do
        case $filename in
                *.jpg) LPIX="${LPIX} ${filename%.*}" ;;
                *.JPG) UPIX="${UPIX} ${filename%.*}" ;;
        esac
done
Lno=`echo "$LPIX" | wc -w`
Uno=`echo "$UPIX" | wc -w`
cat $SrcFileName |
/usr/bin/awk -v CheckOpt=$OnClick -v Tsize=$ThumbSize -v FSpec=$JpgLoc -v lnum="$Lno" -v unum="$Uno" -v ljpgs="$LPIX" -v ujpgs="$UPIX" ' function ExtractString(Str,EndQuote)
{
        AttrStart=RSTART+RLENGTH+1
        RemainingString=substr(Str,AttrStart,length(Str)-AttrStart)
        if( EndQuote == 1 ) {
                AttrEnd=index(RemainingString,"\"")-1
                Attr=substr(RemainingString,1,AttrEnd)
                return Attr
        }
        else return RemainingString
}
BEGIN   {
        FS=","
        OFS="\t"
        OptLength=length(CheckOpt)
        if( OptLength > 3 ) {
                print "** VIEWING OPTION UNSUPPORTED **"
                exit(4)
        }
        if( OptLength == 3 ) {
                ViewOpt=substr(CheckOpt,1,1)
                # Unless incorrectly specified, this is the "sq" letter option
                LargeSize="sq"
        }
        if( OptLength == 2 ) {
                ViewOpt=substr(CheckOpt,1,1)
                LargeSize=substr(CheckOpt,2,1)
        }
        if( OptLength == 1 ) {
                ViewOpt=sprintf(CheckOpt)
                LargeSize="o"
        }
        LargeStrEnd=sprintf("\"key\":" LargeSize)
	if( lnum > 0 ) {
		split(ljpgs,LPIX," ")
	}
	if( unum > 0 ) {
		split(ujpgs,UPIX," ")
	}
        # Create Header Row:
        print "folder" OFS "desc" OFS "name" OFS "Latitude" OFS "Longitude" OFS "thumbnail" OFS "url" OFS "date" OFS "n-size" # header line
} #end BEGIN
{
        # Get Album ID
        if (match($0,/\"albumId\":/)) {
                albumId=ExtractString($0,1)
        }

        if (match($0,/\{\"_flickrModelRegistry\":\"photo-models\"/)) {
                NumPix = split($0,PicsArray,/\{\"_flickrModelRegistry\":\"photo-models\"/)

                # Get Owner ID
                if( match(PicsArray[1], /\"id\":/)) {
                        ownerId=ExtractString($0,1)
                }
                else exit(4)
                for (j=2; j<=NumPix; j++) {

                        # Get title = photo name = file name:
                        if( match(PicsArray[j], /\"title\":/)) {
                                title=ExtractString(PicsArray[j],1)
                        }
                        else exit(4)

                        # There may or may not be a "description", check the string:
                        if( match(PicsArray[j], /\"description\":/)) {
                                description=ExtractString(PicsArray[j],1)
                        }
                        else description = "Enter description here"

                        # Get the thumbnail pointer:
                        if( match(PicsArray[j], "\"" Tsize "\"")) {
                                KS_String=ExtractString(PicsArray[j],0)
                                if( match(KS_String, /\"url\":/)) {
                                        thumbUrl=ExtractString(KS_String,1)
                                        gsub(/\\/,"",thumbUrl)
                                }
                                else exit(4)
                        }
                        else exit(4)
                        
                        # Get the n-size pointer, regardless of thumbnail specified above
                        if( match(PicsArray[j], "\"n\"")) {
				nSize=ExtractString(PicsArray[j],0)
				if( match(nSize,/\"url\":/)) {
					n_url=ExtractString(nSize,1)
					gsub(/\\/,"",n_url)
				}
				else exit(4)
			}
                        
                        # Get Photo ID to use for building Photo URL - tjs note could also extract this from thumbUrl
                        if( match(PicsArray[j], /\"ownerNsid\":/)) {
                                Nsid=ExtractString(PicsArray[j],0)
                                if( match(Nsid, /\"id\":/)) {
                                        photoId=ExtractString(Nsid,1)
                                }
                                else exit(4)
                        }
                        else exit(4)
			
                        # Get GPS data using exiftool: NOTE: case treatment of jpg (upper & lower-case)
			if( lnum > 0 ) {
				for(m=1; m<=lnum; m++) {
					if( LPIX[m] ~ title ) {
						exifCmdLine=sprintf("exiftool -csv -n -GPSL*e -Date* " FSpec "/" title ".jpg | tail -n+2" )
					}
				}
			}
			if( unum > 0 ) {
				for(k=1; k<=unum; k++) {
					if( UPIX[k] ~ title ) {
						exifCmdLine=sprintf("exiftool -csv -n -GPSL*e -Date* " FSpec "/" title ".JPG | tail -n+2" )
					}
				}
			}
                        #exifCmdLine=sprintf("exiftool -csv -n -GPSL*e -Date* " FSpec "/" title "*.JPG | tail -n+2" )
                        exifCmdLine | getline exifOutput
			gpsInfoCount=split(exifOutput,gpsInfo,/,/)

                        # All elements are in place to create viewing option specified:
                        flickrleft="https://www.flickr.com/photos/"
                        # Opt 1: flickrleft ownerId / "albums/" albumId "/" photoId
                        if( ViewOpt == 1 ) {
                                pageurl=sprintf(flickrleft ownerId "/" photoId "/in/photostream/")
                        }
                        # Opt 2: flickrleft ownerId "/" photoId "/" in/album- albumId
                        if( ViewOpt == 2) {
                                pageurl=sprintf(flickrleft ownerId "/" photoId "/in/album-" albumId)
                        }
                        # Opt 4: flickrleft ownerId/photoId/sizes/l
                        if( ViewOpt == 4 ) {
                                pageurl=sprintf(flickrleft ownerId "/" photoId "/sizes/l")
                        }
                        if( ViewOpt == 1 || ViewOpt == 2 || ViewOpt == 4 ) {
                                print "Folder1" OFS title OFS description OFS gpsInfo[2] OFS gpsInfo[3] OFS "https:" thumbUrl OFS pageurl OFS gpsInfo[4] OFS "https:" n_url
                        }
                        # Opt 3: already stashed in tmp.csv
                        if( ViewOpt == 3 ) {
                                if( match(PicsArray[j], "\"" LargeSize "\"")) {
                                LS_String=ExtractString(PicsArray[j],0)
                                if( match(LS_String, /\"url\":/)) {
                                        largeUrl=ExtractString(LS_String,1)
                                        gsub(/\\/,"",largeUrl)
                                }
                                else exit(4)
                                print "Folder1" OFS title OFS description OFS gpsInfo[2] OFS gpsInfo[3] OFS "https:" thumbUrl OFS "https:" largeUrl OFS gpsInfo[4] OFS "https:" n_url
                        }
                        else exit(4)

                        }
                }  #END for(j=2;   loop
        }  #END match for photo-models
}  #END awk script
' > GPSVinput.tsv
if [ $RMFLAG == 1 ]
then {
	$(rm zool)
}
fi
echo "DONE"
#
#-------------------------------------------------------------
# Size Letter Options: NOTE: Samsung phone listed first
# TYPE          KEY     IMAGE SIZE      NOTES
#-------------------------------------------------------------
# Square 75     sq      75 x 75         Both phones
# Square 150    q       150 x 150       Both phones
# Thumbnail     t       100 x 60        iPhone6: 100 x 75
# Small 240     s       240 x 144       iPhone6: 240 x 180
# Small 320     n       320 x 192       iPhone6: 320 x 240
# Medium 500    m       500 x 300       iPhone6: 500 x 375
# Medium 640    z       640 x 384       iPhone6: 640 x 480
# Medium 800    c       800 x 480       iPhone6: 800 x 600
# Large 1024    l       1024 x 614      iPhone6: 1024 x 768
# Large 1600    h       1600 x 960      iPhone6: 1600 x 1200
# Large 2048    k       2048 x 1229     iPhone6: 2048 x 1536
# Original      o       2560 x 1536     iPhone6: 3264 x 2448

