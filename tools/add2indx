#!/bin/bash
# VERSION 1.0;
# NOTE: Flags which have arguments must have a space between the flag and argument
# Specify starting & default values for shell variables 
FILESRC=0
indxLoc="./index.html"
export indxLoc
# Now process command line arguments
for i
do
# 	-p: Get path for html 
	if [ $FILESRC -gt 0 ]
	then {
		indxLoc=$i"/index.html"
		FILESRC=0
	}
	fi
        # find flags:
        case $i in
	-p) FILESRC=1 ;;
	-h) echo "
*** Version 1.0
This utility will prompt the user for input to create a new row in \"index.html\".
Inputs will be verified by the user before creating the html.

Use the -p flag to specify the path to the index.html file if not local.
Do not include the \"/\" at the end of the path, nor the index.html filename.

The user will have the opportunity to save the file to index.html, or save only
the local copy, \"newindex.html\" if review is desired before saving to index.html

"
	exit;;
        esac
done
echo "The file:" "$indxLoc" "will be modified (if user opts) to add a row to the table"
fext=.html
echo ""
good="NotOK"
while
	[ $good != "OK" ]
do
	read -p "Is this table entry for an Index Site (page with another table of links)? [Y or N]: " answer
    case $answer in
        [nN]* ) notindx=1
		good="OK";;
        [yY]* ) notindx=0
		echo "The Flickr album entry will state: See Index Page"
		echo "Miles will indicate: 0*"
		echo "Use max elevation & difficulty of all hikes for those entries"
		good="OK";;
        * ) echo "Y or N only please!";;
    esac
done
good="NotOK"
read -p "Enter the name of the hike location (nearest city): " city
read -p "Enter hike name: " hike
if [ $notindx -gt 0 ]
then {
	read -p "Enter hike distance (round trip) in miles: " miles
}
fi
read -p "Enter hike elevation max in feet: " elev
read -p "Enter hike difficulty: " ease
if [ $notindx -gt 0 ]
then {
	read -p "Enter hike Flickr album link (url): " flnk
	read -p "Enter link name to appear for Flickr album: " flnkName
}
fi
read -p "Enter hike html page (assumed to be in project pages dir with .html extension): " webpg
read -p "Enter link name to appear for html page: " wbpgName
echo "Check the data for accuracy before proceeding:"
# ----------------- TEST THE INPUT DATA --------------------
while
	[ $good != OK ]
do
    msg=$'\nLocation: '
    echo "$msg" $city
    read -p "Is the location Correct? [Y or N]: " answer
    case $answer in
	[nN]* ) read -p "Enter correct location here: " city;;
	[yY]* ) good="OK";;
	* ) echo "Y or N only please!";;
    esac
done
good="NotOK"
while
        [ $good != OK ]
do
    msg=$'\nHike Name: '
    echo "$msg" $hike
    read -p "Is the hike name correct? [Y or N]: " answer
    case $answer in
        [nN]* ) read -p "Enter correct hike name here: " hike;;
        [yY]* ) good="OK";;
        * ) echo "Y or N only please!";;
    esac
done
good="NotOK"
if [ $notindx -gt 0 ]
then {
	while
	        [ $good != OK ]
	do
	    msg=$'\nDistance (miles): '
	    echo "$msg" $miles
	    read -p "Is the distance in miles correct? [Y or N]: " answer
	    case $answer in
	        [nN]* ) read -p "Enter correct distance here (miles): " miles;;
	        [yY]* ) good="OK";;
	        * ) echo "Y or N only please!";;
	    esac
	done
	good="NotOK"
}
fi
while
        [ $good != OK ]
do
    msg=$'\nElevation (feet): '
    echo "$msg" $elev
    read -p "Is the elevation in feet correct? [Y or N]: " answer
    case $answer in
        [nN]* ) read -p "Enter correct elevation in feet here: " elev;;
        [yY]* ) good="OK";;
        * ) echo "Y or N only please!";;
    esac
done
good="NotOK"
while
        [ $good != OK ]
do
    msg=$'\nEase of hike: '
    echo "$msg" $ease
    read -p "Is the ease-of-hike rating correct? [Y or N]: " answer
    case $answer in
        [nN]* ) read -p "Enter correct ease-of-hike rating here: " ease;;
        [yY]* ) good="OK";;
        * ) echo "Y or N only please!";;
    esac
done
good="NotOK"
if [ $notindx -gt 0 ]
then {
	while
    	    [ $good != OK ]
	do
	    msg=$'\nFlickr album link: '
	    echo "$msg" $flnk
	    read -p "Is the Flickr album LINK (URL) correct? [Y or N]: " answer
	    case $answer in
	        [nN]* ) read -p "Enter correct link URL here: " flnk;;
	        [yY]* ) good="OK";;
	        * ) echo "Y or N only please!";;
	    esac
	done
	good="NotOK"
	while
	        [ $good != OK ]
	do
	    msg=$'\nFlickr album link name: '
	    echo "$msg" $flnkName
	    read -p "Is the name of the link to the Flickr ablum correct? [Y or N]: " answer
	    case $answer in
	        [nN]* ) read -p "Enter correct link name for Flickr album here: " flnkName;;
	        [yY]* ) good="OK";;
	        * ) echo "Y or N only please!";;
	    esac
	done
	good="NotOK"
}
fi
while
        [ $good != OK ]
do
    msg=$'\nNew html web page name: '
    echo "$msg""pages/"${webpg}${fext}
    read -p "Is the html web page name Correct? [Y or N]: " answer
    case $answer in
        [nN]* ) read -p "Enter correct html name (no .html extension) here: " webpg;;
        [yY]* ) good="OK";;
        * ) echo "Y or N only please!";;
    esac
done
good="NotOK"
while
        [ $good != OK ]
do
    msg=$'\nNAME for the new web page link: '
    echo "$msg" $wbpgName
    read -p "Is the name for the link to the new web page correct? [Y or N]: " answer
    case $answer in
        [nN]* ) read -p "Enter correct link name here: " wbpgName;;
        [yY]* ) good="OK";;
        * ) echo "Y or N only please!";;
    esac
done
good="NotOK"
# ----------------------- END OF INPUT DATA TESTING ----------------------
# Now, create the new table entry:
if [ $notindx -gt 0 ] 
then {
	echo "                          <tr>
                                        <td>""$city""</td>
                                        <td>""$hike""</td>
                                        <td>""$miles"" miles</td>
                                        <td>""$elev"" ft</td>
                                        <td>""$ease""</td>
                                        <td><a href=\"""$flnk""\" target=\"_blank\">""$flnkName""</a></td>
                                        <td><a href=\"pages/""$webpg"".html""\" target=\"_blank\">""$wbpgName""</a></td>
                                </tr>" > newRow

}
else {
	echo "				<tr>
					<td>""$city""</td>
					<td>""$hike""</td>
					<td>0* miles</td>
					<td>""$elev"" ft</td>
					<td>""$ease""</td>
					<td>See Index Page</td>
					<td><a href=\"pages/""$webpg"".html""\" target=\"_blank\">""$wbpgName""</a></td>
				</tr>" > newRow
}
fi
# pull in the index.html file:
indxHd=`/usr/bin/awk '{
	#Get the end of the table, marked by the </tbody> tag:
	if( match($0,/<\/tbody>/) ) {
		eotbl=NR
		eotbl=eotbl-1
		print eotbl
	}
}'  "$indxLoc"`
head -n "$indxHd" "$indxLoc" > IndxHead.html
indxLines=`cat "$indxLoc" | wc -l`
indxTl=$(( $indxLines - $indxHd ))
tail -n "$indxTl" "$indxLoc" > IndxTail.html
cat newRow >> IndxHead.html
rm newRow
cat IndxTail.html >> IndxHead.html
mv IndxHead.html newindex.html
rm IndxTail.html
echo "
The following data will be added:"
diff newindex.html "$indxLoc" | tail -9
good="NotOK"
while
        [ $good != OK ]
do
	read -p "Do you wish to permanently save these changes in $indxLoc [Y/N]?" ans
	case $ans in
	    [nN]* ) echo "$indxLoc unchanged; Changes reside in newindex.html"
		    good="OK" ;;
	    [yY]* ) echo "$indxLoc has been re-written with new row data"
		    mv newindex.html "$indxLoc"
		    good="OK";;
	    * ) echo "Y or N only please!";;
	esac
done
echo "DONE!"
