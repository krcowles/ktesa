#!/bin/bash
# VERSION 4.2; Added local check for FlckrAlbum link (from mkgpsv); tweaked help output
# Specify starting & default values for shell variables 
FILESRC=0
indxLoc="./index.html"
export indxLoc
# Now process command line arguments
for i
do
# 	-p: Get path for html 
	if [ $FILESRC -gt 0 ]
	then {
		indxLoc=$i"/index.html"
		FILESRC=0
	}
	fi
        # find flags:
        case $i in
	-p) FILESRC=1 ;;
	-h) echo "
*** Version 4.1
Rewritten to accommodate icon-based index table
[4.1: added local check for FlckrAlbumURL created by mkgpsv]
"
# *** Version 3.0
# Added prompt to identify expected exposure 
# *** Version 2.0
# Added prompt to locate region of NM Map in which hike occurred
# *** Version 1.0
	echo "
This utility will prompt the user for input to create a new row
in the table for \"index.html\".

Inputs will be verified by the user before creating the html.

Use the -p flag to specify the path to the index.html file if not local.
Do not include the \"/\" at the end of the path, nor the index.html filename.
Specify the path as if you were going to do a \"cd\" to the directory
For example:   ../../ktesa

The user will have the opportunity to save the file to index.html, or save only
the local copy, \"newindex.html\" if review is desired before saving to index.html

"
	exit;;
        esac
done
# Test for existence of index.html for the path:
if [ -f $indxLoc ] 
then
	echo "using" "$indxLoc" "as basis for potential modification..."
	echo ""
else
	echo "index.html file not found at" "$indxLoc"
	exit
fi
echo ""
echo "The file:" "$indxLoc" "will be modified (if user opts) to add a row to the table"
fext=.html
echo ""
# start prompting for data, depending on whether or not the entry is an index site:
good="NotOK"
echo ""
while
	[ $good != "OK" ]
do
	read -p "Is this table entry for an Index Site (page with another table of links)? [Y or N]: " answer
    case $answer in
        [nN]* ) notindx=1
		good="OK";;
        [yY]* ) notindx=0
		echo "The following parameters will be pre-assigned:"
		echo "    Distance: 0* miles"
		echo "    Elevation: 0* ft"
		echo "    Difficulty: See Indx"
		echo "    Exposure: See Indx"
		echo "    Flickr album entry: See Indx"
		echo "Row class will be \"indxd\""
		good="OK";;
        * ) echo "Y or N only please!";;
    esac
done
good="NotOK"
echo ""
read -p "Enter a number corresponding to the Region in which this/these hike(s) occurs: " region
read -p "Enter the name of the hike location (nearest city): " city
read -p "Enter hike name [Append with \"Index\" for Index pages]: " hike
read -p "Enter hike (or index site) html page [* Assumed to be in project pages dir with .html extension]: " webpg
if [ $notindx -gt 0 ]
then {
	read -p "Enter hike distance (round trip) in miles: " miles
	read -p "Enter hike elevation max in feet: " elev
	read -p "Enter hike difficulty: " ease
	read -p "Enter S (sunny-exposed), M (mix sun-shade), or W (well-shaded): " exp
	if [ -f FlckrAlbumURL ] 
	then
		flnk=`cat FlckrAlbumURL`
	else
		read -p "Enter hike Flickr album link (url): " flnk
	fi
}
fi
echo ""
echo "*** Check the data for accuracy before proceeding ***"
# ----------------- TEST THE INPUT DATA --------------------
while
	[ $good != OK ]
do
	msg=$'\nRegion on NM of hike: '
	echo "$msg" $region
	read -p "Is the region of the hike Correct? [Y or N]: " answer
	case $answer in
		[nN]* ) read -p "Enter correct region: " region;;
		[yY]* ) good="OK";;
		* ) echo "Y or N only please!";;
	esac
done
good="NotOK"
while
	[ $good != OK ]
do
    msg=$'\nLocation: '
    echo "$msg" $city
    read -p "Is the location Correct? [Y or N]: " answer
    case $answer in
	[nN]* ) read -p "Enter correct location here: " city;;
	[yY]* ) good="OK";;
	* ) echo "Y or N only please!";;
    esac
done
good="NotOK"
while
        [ $good != OK ]
do
    msg=$'\nHike Name: '
    echo "$msg" $hike
    read -p "Is the hike name correct? [Y or N]: " answer
    case $answer in
        [nN]* ) read -p "Enter correct hike name here: " hike;;
        [yY]* ) good="OK";;
        * ) echo "Y or N only please!";;
    esac
done
good="NotOK"
# if the entry is not an index site, prompt for the distance, elevation, ease of hike::
if [ $notindx -gt 0 ]
then {
	# DISTANCE:
	while
	        [ $good != OK ]
	do
	    msg=$'\nDistance (miles): '
	    echo "$msg" $miles
	    read -p "Is the distance in miles correct? [Y or N]: " answer
	    case $answer in
	        [nN]* ) read -p "Enter correct distance here (miles): " miles;;
	        [yY]* ) good="OK";;
	        * ) echo "Y or N only please!";;
	    esac
	done
	good="NotOK"
	# ELEVATION:
	while
       	 [ $good != OK ]
	do
	    msg=$'\nElevation (feet): '
	    echo "$msg" $elev
	    read -p "Is the elevation in feet correct? [Y or N]: " answer
	    case $answer in
	        [nN]* ) read -p "Enter correct elevation in feet here: " elev;;
	        [yY]* ) good="OK";;
	        * ) echo "Y or N only please!";;
	    esac
	done
	good="NotOK"
	# EASE OF HIKE:
	while
       	 [ $good != OK ]
	do
	    msg=$'\nEase of hike: '
	    echo "$msg" $ease
	    read -p "Is the ease-of-hike rating correct? [Y or N]: " answer
	    case $answer in
	        [nN]* ) read -p "Enter correct ease-of-hike rating here: " ease;;
	        [yY]* ) good="OK";;
	        * ) echo "Y or N only please!";;
	    esac
	done
	good="NotOK"
	# EXPOSURE RATING:
	# FIRST: check exposure rating;
	case $exp in
	    [mMsSwW] ) setting="OK" ;;
	    * ) setting="notOK" ;;
	esac
	# if the setting was incorrect to begin with, get a legitimate one:
	if [ $setting != OK ]
	then
	    while [ $setting != OK ]
	    do
		echo ""
	        echo "Exposure factor is incorrectly set to" "$exp"
	        read -p "Enter S (sunny-exposed), M (mix sun-shade), or W (well-shaded) only: " exp
		case $exp in
		    [mMsSwW] ) setting="OK" ;;
		    * )  setting="notOK" ;;
		esac
	    done
	fi
	# now that there is a legitimate setting, ask the user if it is the one desired:
	while 
	    [ $good != OK ]
	do
	    msg=$'\nExposure Factor: '
	    echo "$msg" $exp
	    read -p "Is the Exposure Factor correctly specified? [Y or N]: " answer
	    case $answer in
		# if not, prompt and test the entry until it is qualified:
		[nN]* ) read -p "Enter S (sunny-exposed), M (mix sun-shade), or W (well-shaded) only: " exp
			# Make sure it is qualified:
			case $exp in
				[mMsSwW] ) setting="OK" ;;
				* ) setting="notOK" ;;
			esac
			if [ $setting != OK ]
			then	
				while [ $setting != OK ]
				do
					echo ""
					echo "Exposure factor is incorrectly set to" "$exp"
					read -p "Enter S (sunny-exposed), M (mix sun-shade), or W (well-shaded) only: " exp
					case $exp in
						[mMsSwW] ) setting="OK" ;;
						* ) setting="notOK" ;;
					esac
				done
			fi ;;
		[yY]* ) good="OK" ;;
		* ) echo "Y or N only please!" ;;
	    esac
	done
	good="NotOK"
	# LASTLY, Check Flickr album line
	while
    	    [ $good != OK ]
	do
	    msg=$'\nFlickr album link: '
	    echo "$msg" $flnk
	    read -p "Is the Flickr album LINK (URL) correct? [Y or N]: " answer
	    case $answer in
	        [nN]* ) read -p "Enter correct link URL here: " flnk;;
	        [yY]* ) good="OK";;
	        * ) echo "Y or N only please!";;
	    esac
	done
	good="NotOK"
	# translate the Exposure Rating letter into the corresponding icon
	case $exp in
	        [mM] ) expIcon="images/greenshade.jpg"
			expTxt="Partial shade icon" ;;
	        [sS] ) expIcon="images/sun.jpg"
			expTxt="Full sun - exposed icon" ;;
	        [wW] ) expIcon="images/shady.png"
			expTxt="Partial sun/shade icon" ;;
	esac
}
fi

# whether an index site or not, prompt for the following:
while
        [ $good != OK ]
do
    msg=$'\nNew html web page name: '
    echo "$msg""pages/"${webpg}${fext}
    read -p "Is the html web page name Correct? [Y or N]: " answer
    case $answer in
        [nN]* ) read -p "Enter correct html name (no .html extension) here: " webpg;;
        [yY]* ) good="OK";;
        * ) echo "Y or N only please!";;
    esac
done
# ----------------------- END OF INPUT DATA TESTING ----------------------

# Now, create the new table entry:
if [ $notindx -gt 0 ] 
then {
	echo "                    <tr class=\"reg""$region"\"">
                        <td>""$city""</td>
                        <td>""$hike""</td>
                        <td><a href=\"pages/""$webpg"".html\" target=\"_blank\">
                            <img class=\"webShift\" src=\"images/greencheck.jpg\" alt=\"checkbox\" /></a></td>
                        <td>""$miles"" miles</td>
                        <td>""$elev"" ft</td>
                        <td>""$ease""</td>
                        <td><img class=\"expShift\" src=\""$expIcon"\" alt=\""$expTxt"\" /></td>
                        <td><a href=\""$flnk"\" target=\"_blank\">
                            <img class=\"flckrShift\" src=\"images/flckr.jpg\" alt=\"Flickr symbol\" /></a></td>
                    </tr>" > newRow

}
else {
# if an index site, some parameters are automatically assigned or empty:
	echo "                    <tr class=\"reg""$region"" indxd\">
                        <td>""$city""</td>
                        <td>""$hike""</td>
                        <td><a href=\"pages/""$webpg"".html\" target=\"_blank\">
                            <img class=\"webShift\" src=\"images/indxCheck.png\" alt=\"checkbox\" /></td>
                        <td>0* miles</td>
                        <td>0* ft</td>
                        <td>See Indx</td>
                        <td>See Indx</td>
                        <td>See Indx</td>
                    </tr>" > newRow
}
fi
# pull in the index.html file:
indxHd=`/usr/bin/awk '{
	#Get the end of the table, marked by the </tbody> tag:
	if( match($0,/<\/tbody>/) ) {
		eotbl=NR
		eotbl=eotbl-1
		print eotbl
	}
}'  "$indxLoc"`
head -n "$indxHd" "$indxLoc" > IndxHead.html
indxLines=`cat "$indxLoc" | wc -l`
indxTl=$(( $indxLines - $indxHd ))
tail -n "$indxTl" "$indxLoc" > IndxTail.html
cat newRow >> IndxHead.html
rm newRow
cat IndxTail.html >> IndxHead.html
mv IndxHead.html newindex.html
rm IndxTail.html
echo "
The following data will be added:"
if [ $notindx -gt 0 ]
then
diff newindex.html "$indxLoc" | tail -12
else
diff newindex.html "$indxLoc" | tail -11
fi
good="NotOK"
while
        [ $good != OK ]
do
	read -p "Do you wish to permanently save these changes in $indxLoc [Y/N]? " ans
	case $ans in
	    [nN]* ) echo "$indxLoc unchanged; Changes reside in newindex.html"
		    good="OK" ;;
	    [yY]* ) echo "$indxLoc has been re-written with new row data"
		    mv newindex.html "$indxLoc"
		    good="OK";;
	    * ) echo "Y or N only please!";;
	esac
done
echo "DONE!"
